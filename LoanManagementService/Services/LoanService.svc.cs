using System;
using System.Collections.Generic;
using System.ServiceModel;
using LoanManagementService.DataAccess;

namespace LoanManagementService
{
    public class LoanService : ILoanService
    {
        private readonly LoanRepository _loanRepository;

        public LoanService()
        {
            _loanRepository = new LoanRepository(); // Initialize repository
        }

        public bool IssueLoan(int userId, int bookId)
        {
            try
            {
                var loan = new Loan(
                    loanId: 0,  // Assuming loanId is auto-generated by the database
                    bookId: bookId.ToString(),
                    memberId: userId.ToString(),
                    librarianId: "LibrarianID",  // Replace with actual librarian ID or adjust as necessary
                    issueDate: DateTime.Now,
                    dueDate: DateTime.Now.AddDays(14),  // Assuming a 2-week loan period
                    status: LoanStatus.ACTIVE,
                    renewalsCount: 0,
                    maxRenewals: 2,
                    fineAmount: 0.0m,
                    finePaid: false,
                    notes: string.Empty
                 );

                // Save loan to database
                _loanRepository.AddLoan(loan);
                return true;
            }
            catch (MySql.Data.MySqlClient.MySqlException ex)
            {
                // Log detailed exception information
                System.Diagnostics.Debug.WriteLine($"MySQL Error issuing loan: {ex.Message}\n{ex.StackTrace}");
                if (ex.InnerException != null)
                {
                    System.Diagnostics.Debug.WriteLine($"Inner Exception: {ex.InnerException.Message}\n{ex.InnerException.StackTrace}");
                }
                return false;
            }
            catch (Exception ex)
            {
                // Log general exception information
                System.Diagnostics.Debug.WriteLine($"Error issuing loan: {ex.Message}\n{ex.StackTrace}");
                return false;
            }
        }

        public bool ReturnLoan(int loanId)
        {
            try
            {
                var loan = _loanRepository.GetLoanById(loanId);
                if (loan == null || loan.Status == LoanStatus.RETURNED)
                {
                    return false; // Loan doesn't exist or is already returned
                }

                // Update loan status and return date
                loan.MarkAsReturned(DateTime.Now);
                _loanRepository.UpdateLoan(loan);
                return true;
            }
            catch (Exception ex)
            {
                // Log exception
                Console.WriteLine($"Error returning loan: {ex.Message}");
                return false;
            }
        }

        public Loan GetLoanDetails(int loanId)
        {
            try
            {
                // Retrieve loan details from repository
                return _loanRepository.GetLoanById(loanId);
            }
            catch (Exception ex)
            {
                // Log exception
                Console.WriteLine($"Error fetching loan details: {ex.Message}");
                return null;
            }
        }

        public List<Loan> GetAllActiveLoans()
        {
            try
            {
                // Retrieve all loans and filter by active status
                var allLoans = _loanRepository.GetAllLoans();
                return allLoans.FindAll(loan => loan.Status == LoanStatus.ACTIVE);
            }
            catch (Exception ex)
            {
                // Log exception
                Console.WriteLine($"Error fetching active loans: {ex.Message}");
                return new List<Loan>();
            }
        }
    }
}
